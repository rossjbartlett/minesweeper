{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TEXT_COLORS","DIFFICULTIES","easy","name","size","numBombs","width","fontSize","medium","hard","getAdjCoords","grid","i","j","filter","coord","Header","currentDifficulty","setDifficulty","reset","time","lost","won","numFlags","timeStyle","color","id","onChange","e","target","value","Object","keys","map","d","key","style","onClick","Square","colorClass","numAdjBombs","square","uncover","setFlagged","isBomb","isUncovered","isFlagged","content","className","onContextMenu","preventDefault","Grid","updateGrid","gameStarted","setGameStarted","setWon","setLost","isMobile","gridTemplateColumns","length","pointerEvents","lineHeight","colors","sq","uncoverClick","uncoverRecurse","forEach","flat","x","every","row","App","useState","difficulty","setTime","timerId","setTimerId","window","innerWidth","setIsMobile","confirm","Array","fill","bombs","randRow","Math","floor","random","randCol","createGrid","clearInterval","React","useEffect","addEventListener","setInterval","JSON","parse","stringify","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33e5c9f6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nconst TEXT_COLORS = ['blue', 'green', 'red', 'purple', 'magenta', 'black']\n\nconst DIFFICULTIES = {\n  easy: { name: 'Easy', size: [10, 10], numBombs: 10, width: '35vw', fontSize: ['2.9vw', '7vw'] },\n  medium: { name: 'Medium', size: [13, 18], numBombs: 40, width: '50vw', fontSize: ['2.3vw', '4vw'] },\n  hard: { name: 'Hard', size: [20, 24], numBombs: 99, width: '50vw', fontSize: ['1.7vw', '3vw'] }\n}\n\nfunction getAdjCoords (grid, i, j) {\n  // get [x,y] coordinates that are adjacent to [i,j] that are valid objs\n  const adj = [\n    [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n    [i, j - 1], [i, j + 1],\n    [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]\n  ]\n  return adj.filter(coord => grid[coord[0]] && grid[coord[0]][coord[1]])\n}\n\nfunction createGrid ({ size, numBombs }) {\n  const grid = new Array(size[0]).fill()\n    .map(() => new Array(size[1]).fill({}))\n  let bombs = 0\n  while (bombs < numBombs) {\n    const randRow = Math.floor(Math.random() * size[0])\n    const randCol = Math.floor(Math.random() * size[1])\n    if (!grid[randRow][randCol].isBomb) {\n      grid[randRow][randCol] = { isBomb: true }\n      bombs++\n    }\n  }\n  return grid\n}\n\nfunction Header ({ currentDifficulty, setDifficulty, reset, time, lost, won, numFlags }) {\n  const onChange = e => setDifficulty(DIFFICULTIES[e.target.value])\n  const timeStyle = { color: lost ? 'red' : won ? 'green' : 'inherit' }\n  return (\n    <div id='header'>\n      <select id=\"difficulty\" name=\"difficulty\" onChange={onChange}>\n        {Object.keys(DIFFICULTIES).map(d => (\n          <option value={d} key={d}>{DIFFICULTIES[d].name}</option>\n        ))}\n      </select>\n      <div><span id='numFlagsIcon'>üö©</span>{currentDifficulty.numBombs - numFlags}</div>\n      <div style={timeStyle}><span id='timeIcon'>‚è±</span>{time}</div>\n      <div id='resetBtn' onClick={reset}>‚Ü∫</div>\n    </div>\n  )\n}\n\nfunction Square ({ colorClass, numAdjBombs, square, uncover, setFlagged, lost }) {\n  const { isBomb, isUncovered, isFlagged } = square\n  const contextMenu = (e) => {\n    e.preventDefault()\n    if (!isUncovered) setFlagged(!isFlagged)\n  }\n  const handleClick = (e) => {\n    if (isFlagged) return\n    uncover()\n  }\n  let content = ''\n  if (lost && isBomb) content = 'üí£' // game ended\n  else if (isFlagged) content = 'üö©'\n  else if (isUncovered) {\n    if (isBomb) content = 'üí£'\n    else content = numAdjBombs > 0 ? numAdjBombs : ''\n  }\n  const style = { color: TEXT_COLORS[numAdjBombs] }\n\n  return (\n    <div\n      className={`square ${colorClass} ${isUncovered ? 'uncovered' : ''}`}\n      onClick={handleClick}\n      onContextMenu={contextMenu}\n      style={style}\n    >\n      <div className='content'>{content}</div>\n    </div>\n  )\n}\n\nfunction Grid ({ grid, updateGrid, lost, won, gameStarted, setGameStarted, setWon, setLost, currentDifficulty, isMobile }) {\n  const style = {\n    gridTemplateColumns: `repeat(${grid[0].length}, 1fr)`,\n    pointerEvents: lost || won ? 'none' : '',\n    width: isMobile ? '100vw' : currentDifficulty.width,\n    fontSize: currentDifficulty.fontSize[isMobile ? 1 : 0],\n    lineHeight: isMobile ? '1.5em' : '1.2em'\n  }\n  const colors = ['c0', 'c1']\n\n  function numAdjBombs (i, j) {\n    const adjSquares = getAdjCoords(grid, i, j).map(coord => grid[coord[0]][coord[1]])\n    return adjSquares.filter(sq => sq.isBomb).length\n  }\n\n  function uncoverRecurse (i, j) {\n    if (grid[i][j].isFlagged) return\n    if (grid[i][j].isUncovered) return\n    grid[i][j].isUncovered = true\n    if (grid[i][j].isBomb || numAdjBombs(i, j) > 0) return\n    getAdjCoords(grid, i, j).forEach(coord => {\n      uncoverRecurse(coord[0], coord[1])\n    })\n  }\n\n  function uncoverClick (i, j) {\n    if (grid[i][j].isBomb) {\n      setLost(true)\n      return\n    }\n    uncoverRecurse(i, j)\n    updateGrid(grid)\n    if (!gameStarted) setGameStarted(true)\n    if (grid.flat().filter(x => !x.isBomb).every(x => x.isUncovered)) setWon(true)\n  }\n\n  function setFlagged (i, j, value) {\n    grid[i][j].isFlagged = value\n    updateGrid(grid)\n  }\n\n  return (\n    <div id='grid' style={style}>\n      {grid.map((row, i) => (\n        row.map((square, j) => (\n          <Square\n            square={square}\n            key={'' + i + j}\n            colorClass={colors[(i + j) % 2]}\n            numAdjBombs={numAdjBombs(i, j)}\n            uncover={() => uncoverClick(i, j)}\n            setFlagged={value => setFlagged(i, j, value)}\n            lost={lost}\n          />\n        ))\n      ))}\n    </div>\n  )\n}\n\nfunction App () {\n  const [difficulty, setDifficulty] = useState(DIFFICULTIES.easy)\n  const [grid, updateGrid] = useState([[]])\n  const [time, setTime] = useState(0)\n  const [gameStarted, setGameStarted] = useState(false)\n  const [lost, setLost] = useState(false)\n  const [won, setWon] = useState(false)\n  const [timerId, setTimerId] = useState()\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 700)\n\n  React.useEffect(() => {\n    window.addEventListener('resize', () => setIsMobile(window.innerWidth <= 700))\n  }, [])\n\n  useEffect(reset, [difficulty])\n\n  useEffect(() => {\n    if (gameStarted) {\n      setTimerId(setInterval(() => {\n        setTime(time => time + 1)\n      }, 1000))\n    }\n  }, [gameStarted])\n\n  useEffect(() => {\n    if (lost || won) clearInterval(timerId)\n  }, [lost, won, timerId])\n\n  function reset () {\n    // if the game is over or hasn't started, don't ask for confirmation before resetting\n    if (!grid[0].length || lost || won || grid.flat().every(x => !x.isUncovered) || window.confirm('Are you sure you want to reset the game?')) {\n      updateGrid(createGrid(difficulty))\n      setTime(0)\n      clearInterval(timerId)\n      setGameStarted(false)\n      setLost(false)\n      setWon(false)\n    }\n  }\n\n  const numFlags = grid.flat().filter(x => x.isFlagged).length\n\n  return (\n    <div id='app'>\n      <div id='game'>\n        <Header\n          currentDifficulty={difficulty}\n          setDifficulty={setDifficulty}\n          reset={reset}\n          time={time}\n          lost={lost}\n          won={won}\n          numFlags={numFlags}\n        />\n        <Grid\n          // pass a copy of the grid to avoid unwanted state changes\n          grid={JSON.parse(JSON.stringify(grid))}\n          updateGrid={updateGrid}\n          lost={lost}\n          won={won}\n          gameStarted={gameStarted}\n          setGameStarted={setGameStarted}\n          setLost={setLost}\n          setWon={setWon}\n          currentDifficulty={difficulty}\n          isMobile={isMobile}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n/** TODO\n * guarantee first click not bomb - only add bombs to the grid after the first uncover?\n * make long-tap cause right click on desktop as well\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}