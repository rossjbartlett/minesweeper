{"version":3,"sources":["App.js","index.js"],"names":["TEXT_COLORS","DIFFICULTIES","easy","name","size","numBombs","width","fontSize","medium","hard","getAdjCoords","grid","i","j","filter","coord","Header","currentDifficulty","setDifficulty","reset","time","lost","won","numFlags","timeStyle","color","id","onChange","e","target","value","Object","keys","map","d","key","style","onClick","Square","colorClass","numAdjBombs","square","uncover","setFlagged","isBomb","isUncovered","isFlagged","content","className","onContextMenu","preventDefault","Grid","updateGrid","gameStarted","setGameStarted","setWon","setLost","isMobile","gridTemplateColumns","length","pointerEvents","lineHeight","colors","sq","uncoverClick","x","y","availableCoords","push","bombs","randIndex","Math","floor","random","removedCoord","splice","addBombs","uncoverRecurse","forEach","flat","every","row","App","useState","difficulty","setTime","timerId","setTimerId","window","innerWidth","setIsMobile","confirm","Array","fill","clearInterval","useEffect","addEventListener","setInterval","JSON","parse","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAGMA,G,MAAc,CAAC,OAAQ,QAAS,MAAO,SAAU,UAAW,UAE5DC,EAAe,CACnBC,KAAM,CAAEC,KAAM,OAAQC,KAAM,CAAC,EAAG,IAAKC,SAAU,GAAIC,MAAO,OAAQC,SAAU,CAAC,QAAS,QACtFC,OAAQ,CAAEL,KAAM,SAAUC,KAAM,CAAC,GAAI,IAAKC,SAAU,GAAIC,MAAO,OAAQC,SAAU,CAAC,QAAS,QAC3FE,KAAM,CAAEN,KAAM,OAAQC,KAAM,CAAC,GAAI,IAAKC,SAAU,GAAIC,MAAO,OAAQC,SAAU,CAAC,QAAS,SAGzF,SAASG,EAAcC,EAAMC,EAAGC,GAO9B,MALY,CACV,CAACD,EAAI,EAAGC,EAAI,GAAI,CAACD,EAAI,EAAGC,GAAI,CAACD,EAAI,EAAGC,EAAI,GACxC,CAACD,EAAGC,EAAI,GAAI,CAACD,EAAGC,EAAI,GACpB,CAACD,EAAI,EAAGC,EAAI,GAAI,CAACD,EAAI,EAAGC,GAAI,CAACD,EAAI,EAAGC,EAAI,IAE/BC,QAAO,SAAAC,GAAK,OAAIJ,EAAKI,EAAM,KAAOJ,EAAKI,EAAM,IAAIA,EAAM,OA6BpE,SAASC,EAAT,GAA0F,IAAvEC,EAAsE,EAAtEA,kBAAmBC,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,SAErEC,EAAY,CAAEC,MAAOJ,EAAO,MAAQC,EAAM,YAAc,WAC9D,OACE,yBAAKI,GAAG,UACN,4BAAQA,GAAG,aAAavB,KAAK,aAAawB,SAJ7B,SAAAC,GAAC,OAAIV,EAAcjB,EAAa2B,EAAEC,OAAOC,UAKnDC,OAAOC,KAAK/B,GAAcgC,KAAI,SAAAC,GAAC,OAC9B,4BAAQJ,MAAOI,EAAGC,IAAKD,GAAIjC,EAAaiC,GAAG/B,UAG/C,6BAAK,0BAAMuB,GAAG,gBAAT,gBAAkCT,EAAkBZ,SAAWkB,GACpE,yBAAKa,MAAOZ,GAAW,0BAAME,GAAG,YAAT,UAA6BN,GACpD,yBAAKM,GAAG,WAAWW,QAASlB,GAA5B,WAKN,SAASmB,EAAT,GAAkF,IAA/DC,EAA8D,EAA9DA,WAAYC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,WAAYtB,EAAQ,EAARA,KAC/DuB,EAAmCH,EAAnCG,OAAQC,EAA2BJ,EAA3BI,YAAaC,EAAcL,EAAdK,UASzBC,EAAU,GACV1B,GAAQuB,EAAQG,EAAU,eACrBD,EAAWC,EAAU,eACrBF,IACKE,EAARH,EAAkB,eACPJ,EAAc,EAAIA,EAAc,IAEjD,IAAMJ,EAAQ,CAAEX,MAAOzB,EAAYwC,IAEnC,OACE,yBACEQ,UAAS,iBAAYT,EAAZ,YAA0BM,EAAc,YAAc,IAC/DR,QAhBgB,SAACT,GACfkB,GACJJ,KAeEO,cArBgB,SAACrB,GACnBA,EAAEsB,iBACGL,GAAaF,GAAYG,IAoB5BV,MAAOA,GAEP,yBAAKY,UAAU,WAAWD,IAKhC,SAASI,EAAT,GAA4H,IAA3GxC,EAA0G,EAA1GA,KAAMyC,EAAoG,EAApGA,WAAY/B,EAAwF,EAAxFA,KAAMC,EAAkF,EAAlFA,IAAK+B,EAA6E,EAA7EA,YAAaC,EAAgE,EAAhEA,eAAgBC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,QAASvC,EAA+B,EAA/BA,kBAAmBwC,EAAY,EAAZA,SACvGrB,EAAQ,CACZsB,oBAAoB,UAAD,OAAY/C,EAAK,GAAGgD,OAApB,UACnBC,cAAevC,GAAQC,EAAM,OAAS,GACtChB,MAAOmD,EAAW,QAAUxC,EAAkBX,MAC9CC,SAAUU,EAAkBV,SAASkD,EAAW,EAAI,GACpDI,WAAYJ,EAAW,QAAU,SAE7BK,EAAS,CAAC,KAAM,MAEtB,SAAStB,EAAa5B,EAAGC,GAEvB,OADmBH,EAAaC,EAAMC,EAAGC,GAAGoB,KAAI,SAAAlB,GAAK,OAAIJ,EAAKI,EAAM,IAAIA,EAAM,OAC5DD,QAAO,SAAAiD,GAAE,OAAIA,EAAGnB,UAAQe,OAa5C,SAASK,EAAcpD,EAAGC,GACnBwC,IACHC,GAAe,GA/FrB,SAAmB3C,EAAnB,EAA6CsD,EAAGC,GAG9C,IAHkD,IAAzB9D,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,SAEzB8D,EAAkB,GACfvD,EAAI,EAAGA,EAAIR,EAAK,GAAIQ,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAK,GAAIS,IAEvBD,IAAMqD,GAAKpD,IAAMqD,GAAGC,EAAgBC,KAAK,CAACxD,EAAGC,IAIrD,IADA,IAAIwD,EAAQ,EACLA,EAAQhE,GAAU,CAGvB,IAAMiE,EAAYC,KAAKC,MAAMD,KAAKE,SAAWN,EAAgBR,QACvDe,EAAeP,EAAgBQ,OAAOL,EAAW,GAAG,GAC1D3D,EAAK+D,EAAa,IAAIA,EAAa,IAAM,CAAE9B,QAAQ,GACnDyB,KAgFEO,CAASjE,EAAMM,EAAmBL,EAAGC,IAEnCF,EAAKC,GAAGC,GAAG+B,OACbY,GAAQ,KAhBZ,SAASqB,EAAgBjE,EAAGC,GACtBF,EAAKC,GAAGC,GAAGiC,WACXnC,EAAKC,GAAGC,GAAGgC,cACflC,EAAKC,GAAGC,GAAGgC,aAAc,EACrBlC,EAAKC,GAAGC,GAAG+B,QAAUJ,EAAY5B,EAAGC,GAAK,GAC7CH,EAAaC,EAAMC,EAAGC,GAAGiE,SAAQ,SAAA/D,GAC/B8D,EAAe9D,EAAM,GAAIA,EAAM,QAajC8D,CAAejE,EAAGC,GAClBuC,EAAWzC,GACPA,EAAKoE,OAAOjE,QAAO,SAAAmD,GAAC,OAAKA,EAAErB,UAAQoC,OAAM,SAAAf,GAAC,OAAIA,EAAEpB,gBAAcU,GAAO,IAQ3E,OACE,yBAAK7B,GAAG,OAAOU,MAAOA,GACnBzB,EAAKsB,KAAI,SAACgD,EAAKrE,GAAN,OACRqE,EAAIhD,KAAI,SAACQ,EAAQ5B,GAAT,OACN,kBAACyB,EAAD,CACEG,OAAQA,EACRN,IAAK,GAAKvB,EAAIC,EACd0B,WAAYuB,GAAQlD,EAAIC,GAAK,GAC7B2B,YAAaA,EAAY5B,EAAGC,GAC5B6B,QAAS,kBAAMsB,EAAapD,EAAGC,IAC/B8B,WAAY,SAAAb,GAAK,OAf3B,SAAqBlB,EAAGC,EAAGiB,GACzBnB,EAAKC,GAAGC,GAAGiC,UAAYhB,EACvBsB,EAAWzC,GAakBgC,CAAW/B,EAAGC,EAAGiB,IACtCT,KAAMA,WAmFH6D,MA3Ef,WAAiB,IAAD,EACsBC,mBAASlF,EAAaC,MAD5C,mBACPkF,EADO,KACKlE,EADL,OAEaiE,mBAAS,CAAC,KAFvB,mBAEPxE,EAFO,KAEDyC,EAFC,OAGU+B,mBAAS,GAHnB,mBAGP/D,EAHO,KAGDiE,EAHC,OAIwBF,oBAAS,GAJjC,mBAIP9B,EAJO,KAIMC,EAJN,OAKU6B,oBAAS,GALnB,mBAKP9D,EALO,KAKDmC,EALC,OAMQ2B,oBAAS,GANjB,mBAMP7D,EANO,KAMFiC,EANE,OAOgB4B,qBAPhB,mBAOPG,EAPO,KAOEC,EAPF,OAQkBJ,mBAASK,OAAOC,YAAc,KARhD,mBAQPhC,EARO,KAQGiC,EARH,KA4Bd,SAASvE,IArKX,IAAqBf,IAuKZO,EAAK,GAAGgD,QAAUtC,GAAQC,GAAOX,EAAKoE,OAAOC,OAAM,SAAAf,GAAC,OAAKA,EAAEpB,gBAAgB2C,OAAOG,QAAQ,+CAC7FvC,GAxKehD,EAwKOgF,EAAWhF,KAvKxB,IAAIwF,MAAMxF,EAAK,IAAIyF,OAC7B5D,KAAI,kBAAM,IAAI2D,MAAMxF,EAAK,IAAIyF,KAAK,SAuKjCR,EAAQ,GACRS,cAAcR,GACdhC,GAAe,GACfE,GAAQ,GACRD,GAAO,IA1BXwC,qBAAU,WACRP,OAAOQ,iBAAiB,UAAU,kBAAMN,EAAYF,OAAOC,YAAc,UACxE,IAEHM,oBAAU5E,EAAO,CAACiE,IAElBW,qBAAU,WACJ1C,GACFkC,EAAWU,aAAY,WACrBZ,GAAQ,SAAAjE,GAAI,OAAIA,EAAO,OACtB,QAEJ,CAACiC,IAEJ0C,qBAAU,YACJ1E,GAAQC,IAAKwE,cAAcR,KAC9B,CAACjE,EAAMC,EAAKgE,IAcf,IAAM/D,EAAWZ,EAAKoE,OAAOjE,QAAO,SAAAmD,GAAC,OAAIA,EAAEnB,aAAWa,OAEtD,OACE,yBAAKjC,GAAG,MAAMsB,UAAW1B,EAAM,MAAQD,EAAO,OAAS,IACrD,yBAAKK,GAAG,QACN,kBAACV,EAAD,CACEC,kBAAmBmE,EACnBlE,cAAeA,EACfC,MAAOA,EACPC,KAAMA,EACNC,KAAMA,EACNC,IAAKA,EACLC,SAAUA,IAEZ,kBAAC4B,EAAD,CAEExC,KAAMuF,KAAKC,MAAMD,KAAKE,UAAUzF,IAChCyC,WAAYA,EACZ/B,KAAMA,EACNC,IAAKA,EACL+B,YAAaA,EACbC,eAAgBA,EAChBE,QAASA,EACTD,OAAQA,EACRtC,kBAAmBmE,EACnB3B,SAAUA,KAGd,yBAAK/B,GAAG,cAAcsB,UAAW1B,GAAOD,EAAO,OAAS,IACrDC,EAAM,WAAaD,EAAO,WAAa,MC9NhDgF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.dcd413da.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nconst TEXT_COLORS = ['blue', 'green', 'red', 'purple', 'magenta', 'black']\n\nconst DIFFICULTIES = {\n  easy: { name: 'Easy', size: [8, 10], numBombs: 10, width: '35vw', fontSize: ['2.9vw', '7vw'] },\n  medium: { name: 'Medium', size: [14, 18], numBombs: 40, width: '50vw', fontSize: ['2.3vw', '4vw'] },\n  hard: { name: 'Hard', size: [20, 24], numBombs: 99, width: '50vw', fontSize: ['1.7vw', '3vw'] }\n}\n\nfunction getAdjCoords (grid, i, j) {\n  // get [x,y] coordinates that are adjacent to [i,j] that are valid objs (not out of bounds)\n  const adj = [\n    [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n    [i, j - 1], [i, j + 1],\n    [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]\n  ]\n  return adj.filter(coord => grid[coord[0]] && grid[coord[0]][coord[1]])\n}\n\nfunction createGrid (size) {\n  const grid = new Array(size[0]).fill()\n    .map(() => new Array(size[1]).fill({}))\n  return grid\n}\n\nfunction addBombs (grid, { size, numBombs }, x, y) {\n  // x, y are coordinates of first click\n  const availableCoords = [] // a list of [i,j] coords\n  for (let i = 0; i < size[0]; i++) {\n    for (let j = 0; j < size[1]; j++) {\n      // add coord if it's not the coord of the first click\n      if (i !== x || j !== y) availableCoords.push([i, j])\n    }\n  }\n  let bombs = 0\n  while (bombs < numBombs) {\n    // add a bomb at a random coord\n    // remove that coord from the availableCoords to avoid duplicates\n    const randIndex = Math.floor(Math.random() * availableCoords.length)\n    const removedCoord = availableCoords.splice(randIndex, 1)[0]\n    grid[removedCoord[0]][removedCoord[1]] = { isBomb: true }\n    bombs++\n  }\n}\n\nfunction Header ({ currentDifficulty, setDifficulty, reset, time, lost, won, numFlags }) {\n  const onChange = e => setDifficulty(DIFFICULTIES[e.target.value])\n  const timeStyle = { color: lost ? 'red' : won ? 'limegreen' : 'inherit' }\n  return (\n    <div id='header'>\n      <select id=\"difficulty\" name=\"difficulty\" onChange={onChange}>\n        {Object.keys(DIFFICULTIES).map(d => (\n          <option value={d} key={d}>{DIFFICULTIES[d].name}</option>\n        ))}\n      </select>\n      <div><span id='numFlagsIcon'>üö©</span>{currentDifficulty.numBombs - numFlags}</div>\n      <div style={timeStyle}><span id='timeIcon'>‚è±</span>{time}</div>\n      <div id='resetBtn' onClick={reset}>‚Ü∫</div>\n    </div>\n  )\n}\n\nfunction Square ({ colorClass, numAdjBombs, square, uncover, setFlagged, lost }) {\n  const { isBomb, isUncovered, isFlagged } = square\n  const contextMenu = (e) => {\n    e.preventDefault()\n    if (!isUncovered) setFlagged(!isFlagged)\n  }\n  const handleClick = (e) => {\n    if (isFlagged) return\n    uncover()\n  }\n  let content = ''\n  if (lost && isBomb) content = 'üí£' // game ended\n  else if (isFlagged) content = 'üö©'\n  else if (isUncovered) {\n    if (isBomb) content = 'üí£'\n    else content = numAdjBombs > 0 ? numAdjBombs : ''\n  }\n  const style = { color: TEXT_COLORS[numAdjBombs] }\n\n  return (\n    <div\n      className={`square ${colorClass} ${isUncovered ? 'uncovered' : ''}`}\n      onClick={handleClick}\n      onContextMenu={contextMenu}\n      style={style}\n    >\n      <div className='content'>{content}</div>\n    </div>\n  )\n}\n\nfunction Grid ({ grid, updateGrid, lost, won, gameStarted, setGameStarted, setWon, setLost, currentDifficulty, isMobile }) {\n  const style = {\n    gridTemplateColumns: `repeat(${grid[0].length}, 1fr)`,\n    pointerEvents: lost || won ? 'none' : '',\n    width: isMobile ? '100vw' : currentDifficulty.width,\n    fontSize: currentDifficulty.fontSize[isMobile ? 1 : 0],\n    lineHeight: isMobile ? '1.5em' : '1.2em'\n  }\n  const colors = ['c0', 'c1']\n\n  function numAdjBombs (i, j) {\n    const adjSquares = getAdjCoords(grid, i, j).map(coord => grid[coord[0]][coord[1]])\n    return adjSquares.filter(sq => sq.isBomb).length\n  }\n\n  function uncoverRecurse (i, j) {\n    if (grid[i][j].isFlagged) return\n    if (grid[i][j].isUncovered) return\n    grid[i][j].isUncovered = true\n    if (grid[i][j].isBomb || numAdjBombs(i, j) > 0) return\n    getAdjCoords(grid, i, j).forEach(coord => {\n      uncoverRecurse(coord[0], coord[1])\n    })\n  }\n\n  function uncoverClick (i, j) {\n    if (!gameStarted) {\n      setGameStarted(true)\n      addBombs(grid, currentDifficulty, i, j)\n    }\n    if (grid[i][j].isBomb) {\n      setLost(true)\n      return\n    }\n    uncoverRecurse(i, j)\n    updateGrid(grid)\n    if (grid.flat().filter(x => !x.isBomb).every(x => x.isUncovered)) setWon(true)\n  }\n\n  function setFlagged (i, j, value) {\n    grid[i][j].isFlagged = value\n    updateGrid(grid)\n  }\n\n  return (\n    <div id='grid' style={style}>\n      {grid.map((row, i) => (\n        row.map((square, j) => (\n          <Square\n            square={square}\n            key={'' + i + j}\n            colorClass={colors[(i + j) % 2]}\n            numAdjBombs={numAdjBombs(i, j)}\n            uncover={() => uncoverClick(i, j)}\n            setFlagged={value => setFlagged(i, j, value)}\n            lost={lost}\n          />\n        ))\n      ))}\n    </div>\n  )\n}\n\nfunction App () {\n  const [difficulty, setDifficulty] = useState(DIFFICULTIES.easy)\n  const [grid, updateGrid] = useState([[]])\n  const [time, setTime] = useState(0)\n  const [gameStarted, setGameStarted] = useState(false)\n  const [lost, setLost] = useState(false)\n  const [won, setWon] = useState(false)\n  const [timerId, setTimerId] = useState()\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 700)\n\n  useEffect(() => {\n    window.addEventListener('resize', () => setIsMobile(window.innerWidth <= 700))\n  }, [])\n\n  useEffect(reset, [difficulty])\n\n  useEffect(() => {\n    if (gameStarted) {\n      setTimerId(setInterval(() => {\n        setTime(time => time + 1)\n      }, 1000))\n    }\n  }, [gameStarted])\n\n  useEffect(() => {\n    if (lost || won) clearInterval(timerId)\n  }, [lost, won, timerId])\n\n  function reset () {\n    // if the game is over or hasn't started, don't ask for confirmation before resetting\n    if (!grid[0].length || lost || won || grid.flat().every(x => !x.isUncovered) || window.confirm('Are you sure you want to reset the game?')) {\n      updateGrid(createGrid(difficulty.size))\n      setTime(0)\n      clearInterval(timerId)\n      setGameStarted(false)\n      setLost(false)\n      setWon(false)\n    }\n  }\n\n  const numFlags = grid.flat().filter(x => x.isFlagged).length\n\n  return (\n    <div id='app' className={won ? 'won' : lost ? 'lost' : ''}>\n      <div id='game'>\n        <Header\n          currentDifficulty={difficulty}\n          setDifficulty={setDifficulty}\n          reset={reset}\n          time={time}\n          lost={lost}\n          won={won}\n          numFlags={numFlags}\n        />\n        <Grid\n          // pass a copy of the grid to avoid unwanted state changes\n          grid={JSON.parse(JSON.stringify(grid))}\n          updateGrid={updateGrid}\n          lost={lost}\n          won={won}\n          gameStarted={gameStarted}\n          setGameStarted={setGameStarted}\n          setLost={setLost}\n          setWon={setWon}\n          currentDifficulty={difficulty}\n          isMobile={isMobile}\n        />\n      </div>\n      <div id='gameOverMsg' className={won || lost ? 'show' : ''}>\n        {won ? 'You Win!' : lost ? 'You Lose' : ''}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}